[spring 실행 순서]
1. pom.xml
2. web.xml 
	복습
	<context-param> : 프로젝트 전반에 걸쳐 사용할 변수, 
	<servlet> : 서블릿에 대한 매핑설정, 
	<Init-param> : 하나의 서블릿에서만 사용하고 싶은 변수를 설정)
	
	스프링
	<param-value> : /WEB-INF/spring/root-context.xml
		-> 프로젝트 전반에 걸쳐 사용할 설정을 root-context.xml에 작성한다.
		
	<url-pattern> : / 를 입력하면 
		웹브라우저 실행화면을 보면 내가만든 패키지의 마지막 ex 만 보이는 것을 확인할 수 있다.
		근데 보면 마지막에 / 요청을 한것을 볼 수 있는데, / 요청을 한다면 그 요청은 <servlet-name>appServlet 이 받는다.
		
		해당 서블릿을 찾아가면
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		임을 알 수 있으며, DispatcherServlet 라는 서블릿은 !!!아주 중요한 서블릿이다.!!!
		DispatcherServlet이 / 요청을 받아들이며, DispatcherServlet는 최초 요청을 받아들이는 서블릿이다.
	
	<init-param> : servlet-context.xml 으로 가라고 명령함.
	
	servlet-context.xml : 
		<bean>을 보면 객체를 만들고 setter 통한 주입을 하고 있음을 확인할 수 있다.
		InternalResourceViewResolver 로 객체를 만든다.
		InternalResourceViewResolver 라는 클래스 안에 setPrefix() 메서드가 존재하며 해당 메서드를 통해 /WEB-INF/views/ 값을 넣는다.
		suffix 도 마찬가지로 setSuffix()에 .jsp 를 넣음.
		
		prifix = /WEB-INF/views/ ; -> 앞에 붙일때 사용하는 코드
		suffix = .jsp ; -> 뒤에 붙일 때 사용하는 코드
		
		즉, 중간에 뭐가 들어감. /WEB-INF/views/ ~~ .jsp


	~ 정리 ~
	/ 요청 -> DispatcherServlet -> servlet-context.xml 
	
	
3. HomeController.java
	/ 요청 후 -> home메서드 실행됨. 위에서 중간에 들어갈 코드가 필요한데, 이때 /WEB-INF/views/home.jsp가 되어 home.jsp 를 실행하게 된다.